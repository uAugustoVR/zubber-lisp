(defstruct Destino_final
	ID
	Loc_destino
)

(defstruct Item_
	Nome
	Preco
)

(setq List_item_rest (list nil))
(setq List_item_farm (list nil))
(setq List_item_super (list nil))
(setq List_item_livra (list nil))
(setq List_dest_final (list nil))

(defun Ler_comercio(Nome_arquivo Opcao_)
	(with-open-file (stream Nome_arquivo)
		(do ((line (read-line stream nil) (read-line stream nil)))
			((null line))
			(setq Aux (split line))
			(print Aux)
			(setq Nome_item (nth 0 Aux))
			(setq Preco_item (read-from-string (nth 1 Aux)))
			(setq Item (make-Item_	:Nome Nome_item
													:Preco Preco_item)
			)
			(if (= Opcao_ 5)
				(setq List_item_rest (cons Item List_item_rest))
			)
			(if (= Opcao_ 4)
				(setq List_item_farm (cons Item List_item_farm))
			)
			(if (= Opcao_ 3)
				(setq List_item_super (cons Item List_item_super))
			)
			(if (= Opcao_ 2)
				(setq List_item_livra (cons Item List_item_livra))
			)
		)
	)
)

(defun Escrever_item(Nome_arquivo Opcao_)
	(princ "Nome do item: ")
	(setq Nome_it (read-line))
	(terpri)
	(princ "Preco: ")
	(setq Preco_it (read))
	(terpri)
	(setq Aux (make-Item_	:Nome Nome_it
										:Preco Preco_it)
	)
	(if (= Opcao_ 5)
		(setq List_item_rest (cons Aux List_item_rest))
	)
	(if (= Opcao_ 4)
		(setq List_item_farm (cons Aux List_item_farm))
	)	
	(if (= Opcao_ 3)
		(setq List_item_super (cons Aux List_item_super))
	)	
	(if (= Opcao_ 2)
		(setq List_item_livra (cons Aux List_item_livra))
	)	
	(setq Nome_aux Nome_it)
    (setq Preco_aux (write-to-string Preco_it))
    (setq linha (concatenate 'string Nome_aux ";" Preco_aux))
    (with-open-file (f Nome_arquivo	:direction :output
														:if-exists :append
														:if-does-not-exist :create)
		(write-line linha f))
)

(defun Add_item()
	(princ "Escolha o tipo de estabelecimento: ")
	(terpri)
	(princ "2 - Livraria")
	(terpri)
	(princ "3 - Supermercado")
	(terpri)
	(princ "4 - Farmacia")
	(terpri)
	(princ "5 - Restaurante")
	(terpri)
	(princ "Opcao: ")
	(setq Tipo (read))
	(if (= Tipo 5)
		(Escrever_item ".../Zubber/arquivos/Itens_restaurantes.txt" 5)
	)    
	(if (= Tipo 4)
		(Escrever_item ".../Zubber/arquivos/Itens_farmacias.txt" 4)
	)    
	(if (= Tipo 3)
		(Escrever_item ".../Zubber/arquivos/Itens_supermercados.txt" 3)
	)    
	(if (= Tipo 2)
		(Escrever_item ".../Zubber/arquivos/Itens_livrarias.txt" 2)
	)
)

(defun Verif_pos_item(Nome Tipo)
	(if (= Tipo 5)
		(setq n (Tam_lista List_item_rest))
	)	
	(if (= Tipo 4)
		(setq n (Tam_lista List_item_farm))
	)	
	(if (= Tipo 3)
		(setq n (Tam_lista List_item_super))
	)	
	(if (= Tipo 2)
		(setq n (Tam_lista List_item_livra))
	)
	(setq i 0)
	(setq n (- n 1))
	(dotimes (i n)
		(if (= Tipo 5)
			(setq x (nth i List_item_rest))
		)
		(if (= Tipo 4)
			(setq x (nth i List_item_farm))
		)
		(if (= Tipo 3)
			(setq x (nth i List_item_super))
		)
		(if (= Tipo 2)
			(setq x (nth i List_item_livra))
		)
		(setq y (Item_-Nome x))
		(if (string= y Nome)
			(return-from Verif_pos_item i)
		)
	)
	(Add_item)
)

(defun Mudar_dest_final(i Aux)
	(Set_status i "livre")
	(Set_local i Aux)
)

(defun Finalizar(ID)
	(setq n (Tam_lista List_dest_final)) 
	(setq i 0)
	(setq n (- n 1))
	(dotimes (i n)
		(setq x (nth i List_dest_final)) 
		(setq Aux_id ID)
		(setq Motorista_id (Destino_final-ID x))
		(if (= Aux_id Motorista_id)
			(setq y i)
		)
	)
	(setq z (nth y List_dest_final))
	(setq Aux (Destino_final-Loc_destino z))
	(setq List_dest_final (remove z List_dest_final))
	(setq n (Tam_lista List_motorista)) 
	(setq i 0)
	(setq n (- n 1))
	(dotimes (i n)
		(setq x (nth i List_motorista))
		(setq Aux_id ID)
		(setq Motorista_id (Motorista-ID x))
		(if (= Aux_id Motorista_id)
			(Mudar_dest_final i Aux)
		)
	)
)
