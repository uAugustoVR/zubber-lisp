(defstruct Motorista
 	ID
 	Nome 
	Localizacao 
	Status
)	

(defstruct Local_rua
	Nome
	Tipo
	Latitude
	Longitude
)

(defun split (string)
    (loop for i = 0 then (1+ j)
		as j = (position #\; string :start i)
        collect (subseq string i j)
        while j)
)

(defun Tam_lista(Lista)
	(setq Tam_l (length Lista))
    (return-from Tam_lista Tam_l)
)

(defun Muda (n Lista Elem)
	(if (= n 0)
		(cons Elem (rest Lista))
		(cons (first Lista) (Muda(1- n) (rest Lista) Elem))
	)
)

(defun Cal_distancia(Lat_inicial Long_inicial Lat_final Long_final)
	(setq D2r 0.017453292519943295769236)
    (setq Dlong (* (- Long_final Long_inicial) D2r))
    (setq Dlat (* (- Lat_final Lat_inicial) D2r))
    (setq Temp_sin (sin (/ Dlat 2.0)))
    (setq Temp_cos (cos (* Lat_inicial D2r)))
    (setq Temp_sin2 (sin (/ Dlong 2.0)))
    (setq a (+ (* Temp_sin Temp_sin) (* (* Temp_cos Temp_cos) (* Temp_sin2 Temp_sin2))))
    (setq c (* 2.0 (atan (sqrt a) (sqrt (- 1.0 a)))))
    (return-from Cal_distancia (* 6368.1 c))
)

(defun Ler_local()
	(setq List_local (list nil))
	(with-open-file (stream ".../Zubber/arquivos/Locais.txt")
		(do ((line (read-line stream nil) (read-line stream nil)))
			((null line))
			(setq Aux (split line))
			(print Aux)
			(setq Nome_local (nth 0 Aux))
			(setq Tipo_local (read-from-string (nth 1 Aux)))
			(setq Lat_local (read-from-string (nth 2 Aux)))
			(setq Long_local (read-from-string (nth 3 Aux)))
			(setq Local (make-Local_rua	:Nome Nome_local
														:Tipo Tipo_local
														:Latitude Lat_local
														:Longitude Long_local)
			)
			(setq List_local (cons Local List_local))
		)
	)
)

(defun Ler_motoristas()
	(setq List_motorista (list nil))
	(with-open-file (stream ".../Zubber/arquivos/Motoristas.txt")
		(do ((line (read-line stream nil) (read-line stream nil)))
			((null line))
			(setq Aux (split line))
			(print Aux)
			(setq ID_motorista (read-from-string (nth 0 Aux)))
			(setq Nome_motorista (nth 1 Aux))
			(setq Local_motorista (nth 2 Aux))
			(setq Status_motorista (nth 3 Aux))
			(setq Motorsita_ (make-Motorista	:ID ID_motorista
																:Nome Nome_motorista
																:Localizacao Local_motorista
																:Status Status_motorista)
			)
			(setq List_motorista (cons Motorsita_ List_motorista))
		)
	)
)

(defun Add_motorista()
	(terpri)
	(princ "Id motorista: ")
	(setq ID (Tam_lista List_motorista))
	(princ ID)
	(terpri)
	(princ "Nome motorista: ")
	(setq Nome (read-line))
	(terpri)
	(princ "Localizacao: ")
	(setq Local_motorista (read-line))
	(terpri)
	(princ "Status: ")
	(setq Status (read-line))
	(setq Aux (make-motorista	:ID ID
												:Nome Nome
												:Localizacao Local_motorista
												:Status Status)
	)
	(setq List_motorista (cons Aux List_motorista))
	(setq ID_aux (write-to-string ID))
	(setq Nome_aux Nome)
	(setq Local_aux Local_motorista)
	(setq Status_aux Status)
	(setq linha (concatenate 'string ID_aux ";" Nome_aux ";" Local_aux ";" Status_aux))
	(with-open-file (f ".../Zubber/arquivos/Motoristas.txt":direction :output 
																				   :if-exists :append 
																				   :if-does-not-exist :create)
		(write-line linha f))
)

(defun Set_status(n x)
	(setq z (nth n List_motorista))
	(setq z (make-Motorista	:ID (Motorista-id z)
											:Nome (Motorista-nome z)
											:Localizacao (Motorista-Localizacao z)
											:Status x)
	)
	(setq List_motorista (Muda n List_motorista z))
)

(defun Set_local(n x)
	(setq z (nth n List_motorista))
	(setq z (make-Motorista	:ID (Motorista-id z)
											:Nome (Motorista-nome z)
											:Localizacao x
											:Status (Motorista-Status z))
	)
	(setq List_motorista (Muda n List_motorista z))
)

(defun Add_local()
	(terpri)
	(princ "Nome do local: ")
	(setq Nome_loc (read-line))
	(terpri)
	(princ "Tipo do local: ")
	(terpri)
	(princ "1 - Locais nao comerciais ou Shoppings: ")
	(terpri)
	(princ "2 - Livraria: ")
	(terpri)
	(princ "3 - Supermercado: ")
	(terpri)
	(princ "4 -  Farmacia: ")
	(terpri)
	(princ "5 - Restaurante: ")
	(terpri)
	(princ "Tipo do local: ")
	(setq Tipo_loc (read))
	(terpri)
	(princ "Latitude: ")
	(setq Latitude_loc (read))
	(terpri)
	(princ "Longitude: ")
	(setq Longi_loc (read))
	(setq Aux (make-Local_rua	:Nome Nome_loc
												:Tipo Tipo_loc
												:Latitude Latitude_loc
												:Longitude Longi_loc)
	)
	(setq List_local (cons Aux List_local))   
    (setq Nome_aux Nome_loc)
    (setq Tipo_aux (write-to-string Tipo_loc))
    (setq Latitude_aux (write-to-string Latitude_loc))
    (setq Longi_aux (write-to-string Longi_loc))
    (setq linha (concatenate 'string Nome_aux ";" Tipo_aux ";" Latitude_aux ";" Longi_aux))
    (with-open-file (f ".../Zubber/arquivos/Locais.txt":direction :output 
																			 :if-exists :append 
																			 :if-does-not-exist :create)
		(write-line linha f))
)

(defun Verif_pos(Nome)
	(setq n (Tam_lista List_local)) 
	(setq i 0)
	(setq n (- n 1))
	(dotimes (i n)
		(setq x (nth i List_local))
		(setq y (Local_rua-Nome x))
		(if (string= y Nome)
			(return-from Verif_pos i)
		)
	)
	(Add_local)
)

(defun Verif_distancia_maior(Local_user Local_motorista i)
	(setq Pos_user (Verif_pos Local_user))
	(setq Pos_motorista (Verif_pos Local_motorista))
	(setq Aux1 (nth Pos_user List_local))
	(setq Aux2 (nth Pos_motorista List_local))
	(setq Lat_usuario (Local_rua-Latitude Aux1))
	(setq Long_usuario (Local_rua-Longitude Aux1))
	(setq Lat_motorista (Local_rua-Latitude Aux2))
	(setq Long_motorista (Local_rua-Longitude Aux2))
	(setq Distancia (Cal_distancia Lat_usuario Long_usuario Lat_motorista Long_motorista))
	
	(if (<= Distancia 4.5)
		(Set_status i "ocupado")
	)
	(if (<= Distancia 4.5)
		(return-from Verif_distancia_maior 1)
	)
	(if (> Distancia 4.5)
		(return-from Verif_distancia_maior 0)
	)
)

(defun Verif_distancia(Local_user Local_motorista i Identificador)
	(setq Pos_user (Verif_pos Local_user))
	(setq Pos_motorista (Verif_pos Local_motorista))
	(setq Aux1 (nth Pos_user List_local))
	(setq Aux2 (nth Pos_motorista List_local))
	(setq Lat_usuario (Local_rua-Latitude Aux1))
	(setq Long_usuario (Local_rua-Longitude Aux1))
	(setq Lat_motorista (Local_rua-Latitude Aux2))
	(setq Long_motorista (Local_rua-Longitude Aux2))
	(setq Distancia (Cal_distancia Lat_usuario Long_usuario Lat_motorista Long_motorista))
	
	(if (= Identificador 2)
		(return-from Verif_distancia (Verif_distancia_maior Local_user Local_motorista i))
	)
	(if (<= Distancia 2.5)
		(Set_status i "ocupado")
	)
	(if (<= Distancia 2.5)
		(return-from Verif_distancia 1)
	)
	(if (> Distancia 2.5)
		(return-from Verif_distancia 0)
	)
)

(defun Verif_distancia_compra(Local_compra Local_entrega Local_motorista i)
	(setq Pos_compra (Verif_pos Local_compra))
	(setq Pos_entrega (Verif_pos Local_entrega))
	(setq Pos_motorista (Verif_pos Local_motorista))
	(setq Aux1 (nth Pos_compra List_local))
	(setq Aux2 (nth Pos_entrega List_local))
	(setq Aux3 (nth Pos_motorista List_local))
	(setq Lat_compra (Local_rua-Latitude Aux1))
	(setq Long_compra (Local_rua-Longitude Aux1))
	(setq Lat_entrega (Local_rua-Latitude Aux2))
	(setq Long_entrega (Local_rua-Longitude Aux2))
	(setq Lat_motorista (Local_rua-Latitude Aux3))
	(setq Long_motorista (Local_rua-Longitude Aux3))
	(setq Distancia_compra (Cal_distancia Lat_compra Long_compra Lat_motorista Long_motorista))
	(setq Distancia_entrega (Cal_distancia Lat_entrega Long_entrega Lat_compra Long_compra))
	
	(if (<= Distancia_compra 7)
		(if (<= Distancia_entrega 6.5)
			(Set_status i "ocupado")
		)
	)
	(if (<= Distancia_compra 7)
		(if (<= Distancia_entrega 6.5)
			(return-from Verif_distancia_compra 1)
		)
	)
	(if (> Distancia_compra 7)
		(return-from Verif_distancia_compra 0)
	)
)

(defun Verif_livre(Opcao Local_user Local_compra)
	(setq n (Tam_lista List_motorista))
	(setq i 0)
	(setq Tamanho_lista (- n 1))
	(setq Identificador 1)
	
	(if (= Opcao 1)
		(dotimes (i Tamanho_lista)
			(if (= i (- Tamanho_lista 1))	
				(setq Identificador 2)
			)
			(if (= i (- Tamanho_lista 1))
				(setq i 0)
			)
			(setq x (nth i List_motorista))
			(setq y (Motorista-Status x))
			(setq Loc (Motorista-Localizacao x))
			(setq Parada 0)
			(if (string= y "livre")
				(setq Parada (Verif_distancia Local_user Loc i Identificador))
			)
			(if (= Parada 1)
				(setq Identificador 1)
			)
			(if (= Parada 1)
				(return-from Verif_livre i)
			)
		)
	)
	(if (= Opcao 2)
		(dotimes (i Tamanho_lista)
			(setq x (nth i List_motorista))
			(setf y (Motorista-Status x))
			(setf Loc (Motorista-Localizacao x))
			(setq Parada 0)
			(if (string= y "livre")
				(setq Parada (Verif_distancia_compra Local_compra Local_user Loc i))
			)
			(if (= Parada 1)
				(return-from Verif_livre i)
			)
		)
	)
)
